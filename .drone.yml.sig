eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIHRhZ3M6IHRydWUKICAgIHJlY3Vyc2l2ZTogdHJ1ZQogICAgZGVwdGg6IDUwCiAgICBzdWJtb2R1bGVfdXBkYXRlX3JlbW90ZTogdHJ1ZQogICAgc3VibW9kdWxlX292ZXJyaWRlOgogICAgICBzY2FsYWM6IGh0dHBzOi8vZ2l0aHViLmNvbS9zY2FsYWNlbnRlci9zY2FsYS5naXQKICAgICAgdnNjb2RlLXNjYWxhOiBodHRwczovL2dpdGh1Yi5jb20vc2NhbGFjZW50ZXIvdnNjb2RlLXNjYWxhLXByb2ZpbGVkYi5naXQKICAgICAgc2J0LXBsdWdpbi9zcmMvc2J0LXRlc3QvZXh0ZXJuYWwtcHJvamVjdHMvY2lyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdmljYW4vY2lyY2UuZ2l0CgogIHNmdHBfY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBpZ25vcmVfYnJhbmNoOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudCBdCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAoKICBidWlsZDoKICAgIGltYWdlOiBzY2FsYWNlbnRlci9zY2FsYToxLjMKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gc2J0IGNsZWFuICJwbHVnaW4vdGVzdCIgImludGVncmF0aW9ucy90ZXN0IiAicHJvZmlsaW5nU2J0UGx1Z2luL3NjcmlwdGVkIgoKICBwdWJsaXNoOgogICAgaW1hZ2U6IHNjYWxhY2VudGVyL3NjYWxhLXB1Ymxpc2g6MS4zCiAgICB2b2x1bWVzOgogICAgICAtIC9zY2FsYWNlbnRlcjova2V5cwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBkZXBsb3ltZW50IF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBEUk9ORV9ESVI9L2Ryb25lCiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgbG9nIHwgaGVhZCAtbiAyMAogICAgICAtIC91c3IvbG9jYWwvYmluL3NldHVwX2tleXMuc2gKICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zdG9yZV9jcmVkZW50aWFscy5zaAogICAgICAtIHNidCAicHJvZmlsZWRiL3JlbGVhc2VFYXJseSIgInBsdWdpbi9yZWxlYXNlRWFybHkiICJwcm9maWxpbmdTYnRQbHVnaW4vcmVsZWFzZUVhcmx5IgoKICBzZnRwX2NhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIHN1Y2Nlc3MsIGZhaWx1cmUgXQogICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudCBdCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAo.nQL9z8TY1nIohzqS6Zg9CjgojDQ3NB9JVXaVvn0s9jM